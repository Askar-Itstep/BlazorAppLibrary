@page "/authors"
@using BlazorAppLibrary.Repositories
@using BlazorAppLibrary.Models

@inject AuthorsRepository repoAuthor
@inject BooksRepository repoBook
@inject NavigationManager NavigationManager

<h3>Authors</h3>

@if (authors == null)
{
<p><em>Loading...</em></p>
}
else
{
<table class="table table-striped">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Books</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var author in authors)
            {
        <tr>
            <td>@author.FirstName</td>
            <td>@author.LastName</td>
            <td>
                @foreach (var book in author.Books)
                        {
                <p>@book.Title;</p>
                }
            </td>
            <td>
                <ul class="nav flex-row">
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href=@($"editauthor/{@author.Id}") Match="NavLinkMatch.All">
                            <span class="oi oi-wrench" aria-hidden="true"></span> Edit
                        </NavLink>
                    </li>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="/authors" @onclick="(()=>DeleteAuthor(author.Id))" Match="NavLinkMatch.Prefix">
                            <span class="oi oi-minus" aria-hidden="true"></span>Delete
                        </NavLink>
                    </li>
                </ul>

            </td>
        </tr>
        }
    </tbody>
</table>
}
<button class="btn btn-success lg" @onclick="AddAuthor">Add Author</button>



@code {
    private IEnumerable<Author> authors = new List<Author>();
    IEnumerable<Book> books = new List<Book>();

    protected override void OnInitialized()
    {
        authors = repoAuthor.GetAllWithInclude("Books"); // context.Authors;
        books = repoBook.GetAllWithInclude("Images");
    }

    protected override void OnParametersSet()
    {
        //var author = authors.ToList()[0];
        //Console.WriteLine($"author: {author.FirstName}");
        //var authorbooks = author.Books.ToList();
        // authorbooks.ForEach(b => Console.WriteLine($"book: {b.Images.ImageData.Length}"));
    }
    protected void AddAuthor()
    {
        //NavigationManager.NavigateTo("/addauthors");
        NavigationManager.NavigateTo("/editauthor/-1");
    }
    protected void DeleteAuthor(int id)
    {
        try
        {
            repoAuthor.Remove(authors.FirstOrDefault(a => a.Id == id));
        }
        catch (Exception e)
        {
            Console.WriteLine("Error: ", e.Message);
        }
    }

}
